css: is short for Cascading Style Sheets , and cascading means having multiple rules for the same element

css latest version is version 3

inline styling : having the style attribute in the html element and customizing the css properties of the element

css declaration: defining what you want to style and how you want to style it 

font-family : css property that changes the font family of the text 
sans-serif: font will use the browser default

class selectors: allow you to choose all elements with a certain class to apply a certain style 
universal selector : is a selector that is used to style all the elements on the page and is done like this 
*{
	color : blue; 
}
id selector : selects an element using the id like this 
#elementId 
attribute selectors : you select all the elements with certain attributes like this 
[attribute]{
	color: blue
}

css is case insensitive so name your classes like this 
class-name

the order matters in css if you define the same selector twice cause the latest selector is applied

inline styles have the highest priority 

specificity: means that the more specific the selector , the higher priority it has  
and the priority list goes from top to bottom as following 
inline styles
id 
classes , :pseudo classes and attribute selectors
combinator
tags and pseudo element selectors

inheritance : in css elements inherit styles from their direct and indirect parent elements 

combinator types: 
ADJACENT SIBLING
example div + p {}
the element "p in this case" has to be a direct sibling of the related element "div in this case" , meaning that the p must come directly after the div
and they both elements has to share the same parents too
GENERAL SIBLING
example div ~ p {}
it's same as the adjacent sibling but the p element doesn't have to come directly after the div  
CHILD COMBINATOR
div > p {}
the child element has to be a direct child , in the example case the p has to be the direct child of div 
DESCENDANT 
div p {}
a generic approach of the CHILD COMBINATOR , all the elements that are under a div get the styling 
it doesn't matter if it's a direct child or not 

value types : 
PREDEFINED OPTIONS:
example: 
display:block
COLORS: 
example:
color: red
LENGTH,SIZE,NUMBER:
examples: 
height: 100px
FUNCTIONS:
examples : 
background : url()

css rule : is the definition of what to style and how to style it 

inheritance has very low specificity and priority 

css property : inherit  : is a css property that allows you to inherit a certain value of a css property 

combinator : allows mixing multiple css selectors together like this 
#someId .className : this is saying to css select any element with class name className inside of an element with id someId 

box model : content is inside padding that is inside border that is inside margin 

css shorthands : combining values of multiple properties in a single property 

order doesn't matter in css shorthands

margin shorthand : margin top bottom right left  or margin : top&bottom left&right like this "margin 5px 10px" 
or margin top&bottom&left&right like this  margin: "10px"
example : margin 5px 10px 5px 10px 

there is by default a margin of 8px in the body 

margin collapsing : is when two elements have a certain margin , and those two elements are next to each other 
the bigger margin always wins and the two margins between the two elements are combined into one 

you can remove the margin collapsing phenomenon by specifying margin top and margin bottom  

block level elements take up 100% width by default 

margin and border and padding are added to the height set of the element cause the height is set for the content of the element

box-sizing : content-box : this is the default behavior of setting the height and width , they are set to the content box only not to the overall html box 

box-sizing : border-box : this now makes height and width include the border 

block level elements has box-sizing value by default to be content-box 

BEM Block Element Modifier : which is a way of writing css classes names

display property allows changing the nature of the element from inline to block and vice versa 

display : none doesn't remove the element from the dom , it just hides it 

display: inline-block : this allows us to use the behavior of both inline elements in terms of the space they take and the block elements in case of the box model of
margin and padding and so on 

visibility:  hidden : this will hide an element but keep it's position 

value: calc(4-1): calc function is a css function that allows calculation of maths operations 

text-decoration: none : this removes any text decoration like links decoration

vertical-align : aligns two elements on the same line 
example : vertical-align:middle

pseudo classes : are classes that are indicating certain state of an element

pseudo elements: defines the style of a specific part of an element 
example : ::first-letter : allows you to style the first letter of an element 

rules grouping : .class1, .class2{
	something
} : this will apply the same rules to both classes 

url() : css function that allows you to reference urls 
example : background: url() 

rgb(5,5,5) : this is a color function that allows you to control the red green blue degrees 

rgba(color,color,color,blurriness) : is like rgb but the fourth parameter is the blurriness of the color    

box-shadow : allows you to have a shadow behind a box , example:
box-shadow : 2px 2px 2px 2px rgba(0,0,0,0.5)

if you want to align text in an element you set the text-align property in the parent element to center like this 
ParentElement {
	text-align : center 
}

border-radius: 50% : this style allows you to have a circle element , but the height and the width of that element must be equal , aka square

margin : auto : this will center element horizontally but not vertically, so there will be equal distances to the left and to the right 

the order where you import the style sheets into the html is important , the last css import is the one that overwrites all the previous ones 

float is a css feature that allows you to overwrite the browser default positioning and move elements to left or right
we rarely use flow cause it overrides default browser flow , it might be good for positioning elements but not so great for block level elements

position value is static by default

when you change position to fixed , it takes the element out of the document flow , so the other elements doesn't see it as existing 

when you change position to "fixed", any positioning that you do becomes related to the view port 

fixed positions doesn't care if the element is inline or block element

z-index: is the property that controls which elements are on top of other ones

z-index value by default is 0 which means all elements will be on the same level 

z-index doesn't work with static position values 

z-index with negative values will make the icon that is assigned the property under all other default component which have z-index equal to 0

position: absolute : this changes the element to define it's position relative to be closest element that has position property applied 

position : relative : this moves the element relative to it's original position , not to the view port like fixed or the parent that has the position property 

overflow : hidden : this will hide the element if it gets out of it's parent element

if you put the overflow property on the body , it gets moved to the html 
if you want to really apply the overflow property to the body , you have to apply the overflow property to both the body and the html element 

position : sticky : acts as relative and fixed combined , as relative cause as soon the element is out of the parent it disappears , and as fixed cause it becomes on top of other elements

if some elements has the position fixed with no z-index , the last element is the element on top

a fixed position element can't be lower than it's parent , even if it's z-index is lower 

stacking context: is the context that the z-index is calculated within , meaning that if two elements have a have specific z-indices then the children of the element with lower z-index
can't bypass the children  or the element with the higher z-index  or can the parent with the lower z-index

background-size : width height : you can set the image size this way by setting width and height 
example : background-size : 500px 600px 

background-size : cover :  will always fit the image to the container even if the image is smaller it will zoom in the container 

background-size: contain : will always make sure that the whole image is inside the container 